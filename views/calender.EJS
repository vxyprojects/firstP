<html>
<head>
    <meta charset="utf-8"/>
    <title></title>
    <style>
        <!--
        todo 시간 보여지는거 display none 처리 함
        -->
        .fc-time {
            display: none;
        }
        /* ColorPicker */
        .mColorPicker .colorpicker { z-index: 110; }
        .mColorPicker { display: inline-block; }
        .mColorPicker .selected { display: inline-block; width: 23px; height: 20px; border: 1px solid #a7a7a7; border-right: 0; border-bottom-color: #cfcfcf; vertical-align: middle; }
        .mColorPicker .selector { display: inline-block; width: 26px; height: 20px; vertical-align: middle; cursor: pointer; }
        .mColorPicker .selector a { display: inline-block; overflow: hidden; width: 26px; height: 20px; text-indent: 100%; vertical-align: middle; white-space: nowrap; cursor: pointer; background: url("//img.echosting.cafe24.com/suio/sfix_btn.png") no-repeat -34px -21px; }
        .colorpicker { z-index: 10; display: none; overflow: hidden; position: absolute; width: 356px; height: 176px; background: url("//img.echosting.cafe24.com/suio/colorpicker_background.png"); }
        .colorpicker_color { overflow: hidden; position: absolute; left: 14px; top: 13px; width: 150px; height: 150px; cursor: crosshair; background: #f00; }
        .colorpicker_color div { position: absolute; top: 0; left: 0; width: 150px; height: 150px; background: url("//img.echosting.cafe24.com/suio/colorpicker_overlay.png"); }
        .colorpicker_color div div { overflow: hidden; position: absolute; top: 0; left: 0; width: 11px; height: 11px; margin: -5px 0 0 -5px; background: url("//img.echosting.cafe24.com/suio/colorpicker_select.gif"); }
        .colorpicker_hue { position: absolute; top: 13px; left: 171px; width: 35px; height: 150px; cursor: n-resize; }
        .colorpicker_hue div { overflow: hidden; position: absolute; left: 0; width: 35px; height: 9px; margin: -4px 0 0 0; background: url("//img.echosting.cafe24.com/suio/colorpicker_indic.gif") 0 0; }
        .colorpicker_new_color { position: absolute; left: 213px; top: 13px; width: 60px; height: 30px; background: #f00; }
        .colorpicker_current_color { position: absolute; left: 283px; top: 13px; width: 60px; height: 30px; background: #f00; }
        .colorpicker input { position: absolute; top: 4px; right: 11px; height: 11px; margin: 0; padding: 0; border: 1px solid transparent; outline: 0; font-size: 10px; font-family: Arial, Helvetica, sans-serif; color: #898989; text-align: right; background-color: transparent; }
        .colorpicker_hex { position: absolute; left: 212px; top: 142px; width: 72px; height: 22px; background: url("//img.echosting.cafe24.com/suio/colorpicker_hex.png") top; }
        .colorpicker_hex input { right: 6px; }
        .colorpicker_field { position: absolute; height: 22px; width: 62px; background-position: top; }
        .colorpicker_field span { overflow: hidden; position: absolute; top: 0; right: 0; width: 12px; height: 22px; cursor: n-resize; }
        .colorpicker_rgb_r { top: 52px; left: 212px; background-image: url("//img.echosting.cafe24.com/suio/colorpicker_rgb_r.png"); }
        .colorpicker_rgb_g { top: 82px; left: 212px; background-image: url("//img.echosting.cafe24.com/suio/colorpicker_rgb_g.png"); }
        .colorpicker_rgb_b { top: 52px; left: 282px; background-image: url("//img.echosting.cafe24.com/suio/colorpicker_rgb_b.png"); }
        .colorpicker_hsb_h { top: 112px; left: 212px; background-image: url("//img.echosting.cafe24.com/suio/colorpicker_hsb_h.png"); }
        .colorpicker_hsb_s { top: 82px; left: 282px; background-image: url("//img.echosting.cafe24.com/suio/colorpicker_hsb_s.png"); }
        .colorpicker_hsb_b { top: 112px; left: 282px; background-image: url("//img.echosting.cafe24.com/suio/colorpicker_hsb_b.png"); }
        .colorpicker_submit { overflow: hidden; position: absolute; left: 306px; top: 143px; width: 38px; height: 20px; cursor: pointer; background: url("//img.echosting.cafe24.com/suio/colorpicker_submit.png") 0 0; }
        .colorpicker_focus { background-position: center; }
        .colorpicker_hex.colorpicker_focus { background-position: bottom; }
        .colorpicker_submit.colorpicker_focus { background-position: bottom; }
        .colorpicker_slider { background-position: bottom; }

    </style>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">

    <!-- 합쳐지고 최소화된 최신 CSS -->
    <!-- <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css"> -->

    <!-- 부가적인 테마 -->
    <!-- <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/boots  trap/3.3.2/css/bootstrap-theme.min.css"> -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <!-- 합쳐지고 최소화된 최신 자바스크립트 -->

    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>-->
    <!--
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.css"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.print.css"></script>
        -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <link href='http://fonts.googleapis.com/css?family=Lato:100,400,700' rel='stylesheet'/>
    <link href='//cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.0/fullcalendar.min.css' rel='stylesheet'/>
    <link href='//cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.0/fullcalendar.print.css' rel='stylesheet' media='print'/>
    <script src='//cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment.min.js'></script>
    <script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
    <script src='//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js'></script>
    <script src='//cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.0/fullcalendar.min.js'></script>

</head>
<body>
<h1>캘린더 테스트 </h1>
<!-- test-->
<div id='calendar'></div>
<input type="hidden" id="cal_data" value="<%= cal_data %>">
</body>
<script>

    $(document).ready(function () {
        // event 데이타  만들어준다.
        var aEvent = [];
        var aEvent1 = [];
        var oEventItem = {};
        var sCalData = $('#cal_data').val()
        var oJsonCalData = JSON.parse(sCalData);
        //todo  -- reg  색깔 값도 필요 할듯
        for (idx in oJsonCalData) {
            var oMakeData = {};
            for (sKey in  oJsonCalData[idx]) {
                if (sKey === 'cal_text') {
                    oMakeData['title'] = oJsonCalData[idx][sKey]
                } else if (sKey === 'start_date' && oJsonCalData[idx][sKey] !== '') {
                    oMakeData['start'] = oJsonCalData[idx][sKey]
                } else if (sKey === 'end_date' && oJsonCalData[idx][sKey] !== '') {
                    oMakeData['end'] = oJsonCalData[idx][sKey]
                } else if (sKey === 'cal_no' && oJsonCalData[idx][sKey] !== '') {
                    oMakeData['id'] = oJsonCalData[idx][sKey]
                }
                else {
                    oMakeData[sKey] = oJsonCalData[idx][sKey]
                }
            }
            aEvent.push(oMakeData);
        }


        $('#calendar').fullCalendar({
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay,listWeek'
            },
            selectable: true, // 범위 선택 가능 하게 만들어준다
//            selectHelper: true,
//            defaultDate: '2017-09-12',
            navLinks: true, // can click day/week names to navigate views
            editable: true,
            eventLimit: true, // allow "more" link when too many events
            events: aEvent,
//            eventColor: '#378006', // default  칼라인듯
            // color: 'yellow',  이런식으로  입력 받으면 될듯 하다
            //#378006  이런식도 당연히  먹히네

//            ],
            dayClick: function (date, jsEvent, view, resource) {
                console.log(
                    'dayClick',
                    date.format(),
                    resource ? resource.id : '(no resource)'
                );
                $('#data').text(date.format());
            },
            eventDragStop: function () { // 일정을  drag 햇을때
//                console.log('drag stop')
            },
            eventDrop: function (event, dayDelta, minuteDelta, allDay, revertFunc) { // 이것도  일정 관련  drag 관련해서  처리할때
                var sStartBeforeDate = '';
                var sStartAfterDate = '';
                var sEndBeforeDate = '';
                var sEndAfterDate = '';
                if (Object.keys(event.start).length > 0) {
                    sStartBeforeDate = event.start._i;
                    sStartAfterDate = oCalendarUtil.makeCalType(event.start._d, 'start');
                }

                if (Object.keys(event.end).length > 0) {
                    sEndAfterDate = oCalendarUtil.makeCalType(event.end._d, 'end');
                    sEndBeforeDate = event.end._i;
                }

                var oRequestParam = {
                    calNo: event.id,
//                    sStartBeforeDate: sStartBeforeDate,
//                    sEndBeforeDate: sEndBeforeDate
                    sStartAfterDate: sStartAfterDate,
                    sEndAfterDate: sEndAfterDate,
                };

                $.ajax({
                    dataType: "json",
                    url: '/modi_date',
                    type: 'post',
                    data: oRequestParam,
                    success: function (data) {
                        console.log('ajax result')
                        console.log(JSON.parse(data.return_data))
                    }
                });

            },
            select: function (start, end, jsEvent, view, resource) {
                //초기화
                $('input[name="schedule_contents"]').val('')
                // 원래  형태로  바꿔준다 .
                var start_date = start._d.getFullYear() + '-' + (start._d.getMonth() + 1) + '-' + start._d.getDate()
                var end_date = end._d.getFullYear() + '-' + (end._d.getMonth() + 1) + '-' + (end._d.getDate());

                //요일 구하기
                var week = new Array('일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일');
                var start_week = start._d.getDay();
                var end_week = end._d.getDay();
                var startLabel = week[start_week];
                var endLabel = week[end_week];

                var date = ''
                var makedate = ''
                if (parseInt($('.fc-highlight').attr('colspan')) > 1) {
                    date = start_date + ' (' + startLabel + ')' + ' ~ ' + end_date + '( ' + endLabel + ' )';
                    makedate = start_date + '~' + end_date
                } else {
                    date = start_date + ' (' + startLabel + ')';
                    makedate = start_date + '~'
                }

                $('#date').text(date);
                $('#makeDate').val(makedate)
                $('#modal_button').trigger('click')
            },
            dayDraw: function () {
                //todo  날짜 눌렀을 때  이벤트  처리
//                alert('a day has been clicked!');
            }
        });

        $('.reg').click(function (e) {
            var start_date = $(this).parent().parent().find('.modal-body').find('#makeDate').val().split('~')[0]
            var end_date = $(this).parent().parent().find('.modal-body').find('#makeDate').val().split('~')[1]
            var schedule_contents = $('input[name="schedule_contents"]').val();
            var oParams = {
                'start_date': start_date,
                'end_date': end_date,
                'schedule_contents': schedule_contents
            };

            $.ajax({
                dataType: "json",
                url: '/reg_date',
                type: 'post',
                data: oParams,
                success: function (data) {
                    data.return_data = JSON.parse(data.return_data)
//                    console.log('data');
//                    console.log(data.return_data);
//                    console.log('data end');
                    var event = {
                        id: data.return_data.seq_no[0].cal_no,
                        title: data.return_data.title,
                        start: new Date(data.return_data.start),
                        end: new Date(data.return_data.end)
                    };
                    $('#calendar').fullCalendar('renderEvent', event, true);
                    // 마지막  닫아준다 .
                    $('.reg').parent().find('.btn-default').trigger('click');
                }
            });

//            e.preventDefault()
//            return false;
        })
        $('.modi').click(function (e) {
            $.ajax({
                dataType: "json",
                url: '/modi_date',
                type: 'post',
                data: {'params': oParams},
                success: function (data) {
                    console.log('data');
                    console.log(data);
                    console.log('data end');
                }
            });
            e.preventDefault()
            return false;
        })
    });
</script>

<!--레이아웃  테스트  -->
<button type="button" id="modal_button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal" style="display:none;">
    Open Modal
</button>
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">일정 탭 </h4>
                <h4 class="modal-title">시간 탭 r</h4>
            </div>
            <div class="modal-body">
                <p>일정</p>
                <input type="text" name="schedule_contents" placeholder="예: 오후 7시에 멕시코 음식점에서 저녁식사" autofocus=""></input><br/>
                시간<br/> <span id="date"> </span> <input type="hidden" id="makeDate" value=""/>

                <!--
                color picker --  해당 부분 나중에 처리
                <div class="mColorPicker eColorPicker">
                    <span class="selected" style="background-color:#ff0000"></span><input type="text" maxlength="7" readonly="readonly" value="#ff0000" class="fText" style="width:50px">
                    <span class="selector">
                            <a href="#none">컬러선택</a>
                        </span>
                </div>
                -->

                <!--선택 관련  레이아웃  -->
                <div class="colorpicker" id="collorpicker_514" style="left: 495px; top: 391px; display: none;">
                    <div class="colorpicker_color" style="background-color: rgb(255, 0, 0);">
                        <div>
                            <div style="left: 150px; top: 0px;"></div>
                        </div>
                    </div>
                    <div class="colorpicker_hue">
                        <div style="top: 150px;"></div>
                    </div>
                    <div class="colorpicker_new_color" style="background-color: rgb(255, 0, 0);"></div>
                    <div class="colorpicker_current_color" style="background-color: rgb(255, 0, 0);"></div>
                    <div class="colorpicker_hex"><input type="text" maxlength="6" size="6"></div>
                    <div class="colorpicker_rgb_r colorpicker_field">
                        <input type="text" maxlength="3" size="3"><span></span></div>
                    <div class="colorpicker_rgb_g colorpicker_field">
                        <input type="text" maxlength="3" size="3"><span></span></div>
                    <div class="colorpicker_rgb_b colorpicker_field">
                        <input type="text" maxlength="3" size="3"><span></span></div>
                    <div class="colorpicker_hsb_h colorpicker_field">
                        <input type="text" maxlength="3" size="3"><span></span></div>
                    <div class="colorpicker_hsb_s colorpicker_field">
                        <input type="text" maxlength="3" size="3"><span></span></div>
                    <div class="colorpicker_hsb_b colorpicker_field">
                        <input type="text" maxlength="3" size="3"><span></span></div>
                    <div class="colorpicker_submit"></div>
                </div>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="reg" data-dismiss="modal">일정 생성</button>
                <button type="button" class="modi" data-dismiss="modal">일정 수정</button>
            </div>
        </div>

    </div>
</div>
<script>
    /**
     *
     * Color picker
     * Author: Stefan Petre www.eyecon.ro
     *
     * Dual licensed under the MIT and GPL licenses
     *
     */
    (function ($) {
        var EYE = window.EYE = function () {
            var _registered = {
                init: []
            };
            return {
                init: function () {
                    $.each(_registered.init, function (nr, fn) {
                        fn.call();
                    });
                },
                extend: function (prop) {
                    for (var i in prop) {
                        if (prop[i] != undefined) {
                            this[i] = prop[i];
                        }
                    }
                },
                register: function (fn, type) {
                    if (!_registered[type]) {
                        _registered[type] = [];
                    }
                    _registered[type].push(fn);
                }
            };
        }();
        $(EYE.init);

        var ColorPicker = function () {
            var
                ids = {},
                inAction,
                charMin = 65,
                visible,
                tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>',
                defaults = {
                    eventName: 'click',
                    onShow: function () {
                    },
                    onBeforeShow: function () {
                    },
                    onHide: function () {
                    },
                    onChange: function () {
                    },
                    onSubmit: function () {
                    },
                    color: 'ff0000',
                    livePreview: true,
                    flat: false
                },
                fillRGBFields = function (hsb, cal) {
                    var rgb = HSBToRGB(hsb);
                    $(cal).data('colorpicker').fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
                },
                fillHSBFields = function (hsb, cal) {
                    $(cal).data('colorpicker').fields.eq(4).val(hsb.h).end().eq(5).val(hsb.s).end().eq(6).val(hsb.b).end();
                },
                fillHexFields = function (hsb, cal) {
                    $(cal).data('colorpicker').fields.eq(0).val(HSBToHex(hsb)).end();
                },
                setSelector = function (hsb, cal) {
                    $(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({
                            h: hsb.h,
                            s: 100,
                            b: 100
                        }));
                    $(cal).data('colorpicker').selectorIndic.css({
                        left: parseInt(150 * hsb.s / 100, 10),
                        top: parseInt(150 * (100 - hsb.b) / 100, 10)
                    });
                },
                setHue = function (hsb, cal) {
                    $(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h / 360, 10));
                },
                setCurrentColor = function (hsb, cal) {
                    $(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
                },
                setNewColor = function (hsb, cal) {
                    $(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
                },
                keyDown = function (ev) {
                    var pressedKey = ev.charCode || ev.keyCode || -1;
                    if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
                        return false;
                    }
                    var cal = $(this).parent().parent();
                    if (cal.data('colorpicker').livePreview === true) {
                        change.apply(this);
                    }
                },
                change = function (ev) {
                    var cal = $(this).parent().parent(), col;
                    if (this.parentNode.className.indexOf('_hex') > 0) {
                        cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
                    } else if (this.parentNode.className.indexOf('_hsb') > 0) {
                        cal.data('colorpicker').color = col = fixHSB({
                            h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
                            s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
                            b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
                        });
                    } else {
                        cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
                            r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
                            g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
                            b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
                        }));
                    }
                    if (ev) {
                        fillRGBFields(col, cal.get(0));
                        fillHexFields(col, cal.get(0));
                        fillHSBFields(col, cal.get(0));
                    }
                    setSelector(col, cal.get(0));
                    setHue(col, cal.get(0));
                    setNewColor(col, cal.get(0));
                    cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
                },
                blur = function (ev) {
                    var cal = $(this).parent().parent();
                    cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                },
                focus = function () {
                    charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
                    $(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                    $(this).parent().addClass('colorpicker_focus');
                },
                downIncrement = function (ev) {
                    var field = $(this).parent().find('input').focus();
                    var current = {
                        el: $(this).parent().addClass('colorpicker_slider'),
                        max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
                        y: ev.pageY,
                        field: field,
                        val: parseInt(field.val(), 10),
                        preview: $(this).parent().parent().data('colorpicker').livePreview
                    };
                    $(document).bind('mouseup', current, upIncrement);
                    $(document).bind('mousemove', current, moveIncrement);
                },
                moveIncrement = function (ev) {
                    ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
                    if (ev.data.preview) {
                        change.apply(ev.data.field.get(0), [true]);
                    }
                    return false;
                },
                upIncrement = function (ev) {
                    change.apply(ev.data.field.get(0), [true]);
                    ev.data.el.removeClass('colorpicker_slider').find('input').focus();
                    $(document).unbind('mouseup', upIncrement);
                    $(document).unbind('mousemove', moveIncrement);
                    return false;
                },
                downHue = function (ev) {
                    var current = {
                        cal: $(this).parent(),
                        y: $(this).offset().top
                    };
                    current.preview = current.cal.data('colorpicker').livePreview;
                    $(document).bind('mouseup', current, upHue);
                    $(document).bind('mousemove', current, moveHue);
                },
                moveHue = function (ev) {
                    change.apply(
                        ev.data.cal.data('colorpicker').fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.y)))) / 150, 10)).get(0),
                        [ev.data.preview]
                    );
                    return false;
                },
                upHue = function (ev) {
                    fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    $(document).unbind('mouseup', upHue);
                    $(document).unbind('mousemove', moveHue);
                    return false;
                },
                downSelector = function (ev) {
                    var current = {
                        cal: $(this).parent(),
                        pos: $(this).offset()
                    };
                    current.preview = current.cal.data('colorpicker').livePreview;
                    $(document).bind('mouseup', current, upSelector);
                    $(document).bind('mousemove', current, moveSelector);
                },
                moveSelector = function (ev) {
                    change.apply(
                        ev.data.cal.data('colorpicker').fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.pos.top)))) / 150, 10)).end().eq(5).val(parseInt(100 * (Math.max(0, Math.min(150, (ev.pageX - ev.data.pos.left)))) / 150, 10)).get(0),
                        [ev.data.preview]
                    );
                    return false;
                },
                upSelector = function (ev) {
                    fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    $(document).unbind('mouseup', upSelector);
                    $(document).unbind('mousemove', moveSelector);
                    return false;
                },
                enterSubmit = function (ev) {
                    $(this).addClass('colorpicker_focus');
                },
                leaveSubmit = function (ev) {
                    $(this).removeClass('colorpicker_focus');
                },
                clickSubmit = function (ev) {
                    var cal = $(this).parent();
                    var col = cal.data('colorpicker').color;
                    cal.data('colorpicker').origColor = col;
                    setCurrentColor(col, cal.get(0));
                    cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
                },
                show = function (ev) {
                    var cal = $('#' + $(this).data('colorpickerId'));
                    cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
                    var pos = $(this).offset();
                    var viewPort = getViewport();
                    var top = pos.top + this.offsetHeight;
                    var left = pos.left;
                    if (top + 176 > viewPort.t + viewPort.h) {
                        top -= this.offsetHeight + 176;
                    }
                    if (left + 356 > viewPort.l + viewPort.w) {
                        left -= 330;
                    }
                    cal.css({left: left + 'px', top: top + 'px'});
                    if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
                        cal.show();
                    }
                    $(document).bind('mousedown', {cal: cal}, hide);
                    return false;
                },
                hide = function (ev) {
                    if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                        if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
                            ev.data.cal.hide();
                        }
                        $(document).unbind('mousedown', hide);
                    }
                },
                isChildOf = function (parentEl, el, container) {
                    if (parentEl == el) {
                        return true;
                    }
                    if (parentEl.contains) {
                        return parentEl.contains(el);
                    }
                    if (parentEl.compareDocumentPosition) {
                        return !!(parentEl.compareDocumentPosition(el) & 16);
                    }
                    var prEl = el.parentNode;
                    while (prEl && prEl != container) {
                        if (prEl == parentEl)
                            return true;
                        prEl = prEl.parentNode;
                    }
                    return false;
                },
                getViewport = function () {
                    var m = document.compatMode == 'CSS1Compat';
                    return {
                        l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                        t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                        w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                        h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
                    };
                },
                fixHSB = function (hsb) {
                    return {
                        h: Math.min(360, Math.max(0, hsb.h)),
                        s: Math.min(100, Math.max(0, hsb.s)),
                        b: Math.min(100, Math.max(0, hsb.b))
                    };
                },
                fixRGB = function (rgb) {
                    return {
                        r: Math.min(255, Math.max(0, rgb.r)),
                        g: Math.min(255, Math.max(0, rgb.g)),
                        b: Math.min(255, Math.max(0, rgb.b))
                    };
                },
                fixHex = function (hex) {
                    var len = 6 - hex.length;
                    if (len > 0) {
                        var o = [];
                        for (var i = 0; i < len; i++) {
                            o.push('0');
                        }
                        o.push(hex);
                        hex = o.join('');
                    }
                    return hex;
                },
                HexToRGB = function (hex) {
                    var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                    return {r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF)};
                },
                HexToHSB = function (hex) {
                    return RGBToHSB(HexToRGB(hex));
                },
                RGBToHSB = function (rgb) {
                    var hsb = {
                        h: 0,
                        s: 0,
                        b: 0
                    };
                    var min = Math.min(rgb.r, rgb.g, rgb.b);
                    var max = Math.max(rgb.r, rgb.g, rgb.b);
                    var delta = max - min;
                    hsb.b = max;
                    if (max != 0) {

                    }
                    hsb.s = max != 0 ? 255 * delta / max : 0;
                    if (hsb.s != 0) {
                        if (rgb.r == max) {
                            hsb.h = (rgb.g - rgb.b) / delta;
                        } else if (rgb.g == max) {
                            hsb.h = 2 + (rgb.b - rgb.r) / delta;
                        } else {
                            hsb.h = 4 + (rgb.r - rgb.g) / delta;
                        }
                    } else {
                        hsb.h = -1;
                    }
                    hsb.h *= 60;
                    if (hsb.h < 0) {
                        hsb.h += 360;
                    }
                    hsb.s *= 100 / 255;
                    hsb.b *= 100 / 255;
                    return hsb;
                },
                HSBToRGB = function (hsb) {
                    var rgb = {};
                    var h = Math.round(hsb.h);
                    var s = Math.round(hsb.s * 255 / 100);
                    var v = Math.round(hsb.b * 255 / 100);
                    if (s == 0) {
                        rgb.r = rgb.g = rgb.b = v;
                    } else {
                        var t1 = v;
                        var t2 = (255 - s) * v / 255;
                        var t3 = (t1 - t2) * (h % 60) / 60;
                        if (h == 360) h = 0;
                        if (h < 60) {
                            rgb.r = t1;
                            rgb.b = t2;
                            rgb.g = t2 + t3
                        }
                        else if (h < 120) {
                            rgb.g = t1;
                            rgb.b = t2;
                            rgb.r = t1 - t3
                        }
                        else if (h < 180) {
                            rgb.g = t1;
                            rgb.r = t2;
                            rgb.b = t2 + t3
                        }
                        else if (h < 240) {
                            rgb.b = t1;
                            rgb.r = t2;
                            rgb.g = t1 - t3
                        }
                        else if (h < 300) {
                            rgb.b = t1;
                            rgb.g = t2;
                            rgb.r = t2 + t3
                        }
                        else if (h < 360) {
                            rgb.r = t1;
                            rgb.g = t2;
                            rgb.b = t1 - t3
                        }
                        else {
                            rgb.r = 0;
                            rgb.g = 0;
                            rgb.b = 0
                        }
                    }
                    return {r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b)};
                },
                RGBToHex = function (rgb) {
                    var hex = [
                        rgb.r.toString(16),
                        rgb.g.toString(16),
                        rgb.b.toString(16)
                    ];
                    $.each(hex, function (nr, val) {
                        if (val.length == 1) {
                            hex[nr] = '0' + val;
                        }
                    });
                    return hex.join('');
                },
                HSBToHex = function (hsb) {
                    return RGBToHex(HSBToRGB(hsb));
                },
                restoreOriginal = function () {
                    var cal = $(this).parent();
                    var col = cal.data('colorpicker').origColor;
                    cal.data('colorpicker').color = col;
                    fillRGBFields(col, cal.get(0));
                    fillHexFields(col, cal.get(0));
                    fillHSBFields(col, cal.get(0));
                    setSelector(col, cal.get(0));
                    setHue(col, cal.get(0));
                    setNewColor(col, cal.get(0));
                };
            return {
                init: function (opt) {
                    opt = $.extend({}, defaults, opt || {});
                    if (typeof opt.color == 'string') {
                        opt.color = HexToHSB(opt.color);
                    } else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
                        opt.color = RGBToHSB(opt.color);
                    } else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
                        opt.color = fixHSB(opt.color);
                    } else {
                        return this;
                    }
                    return this.each(function () {
                        if (!$(this).data('colorpickerId')) {
                            var options = $.extend({}, opt);
                            options.origColor = opt.color;
                            var id = 'collorpicker_' + parseInt(Math.random() * 1000);
                            $(this).data('colorpickerId', id);
                            var cal = $(tpl).attr('id', id);
                            if (options.flat) {
                                cal.appendTo(this).show();
                            } else {
                                cal.appendTo(document.body);
                            }
                            options.fields = cal.find('input').bind('keyup', keyDown).bind('change', change).bind('blur', blur).bind('focus', focus);
                            cal.find('span').bind('mousedown', downIncrement).end().find('>div.colorpicker_current_color').bind('click', restoreOriginal);
                            options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
                            options.selectorIndic = options.selector.find('div div');
                            options.el = this;
                            options.hue = cal.find('div.colorpicker_hue div');
                            cal.find('div.colorpicker_hue').bind('mousedown', downHue);
                            options.newColor = cal.find('div.colorpicker_new_color');
                            options.currentColor = cal.find('div.colorpicker_current_color');
                            cal.data('colorpicker', options);
                            cal.find('div.colorpicker_submit').bind('mouseenter', enterSubmit).bind('mouseleave', leaveSubmit).bind('click', clickSubmit);
                            fillRGBFields(options.color, cal.get(0));
                            fillHSBFields(options.color, cal.get(0));
                            fillHexFields(options.color, cal.get(0));
                            setHue(options.color, cal.get(0));
                            setSelector(options.color, cal.get(0));
                            setCurrentColor(options.color, cal.get(0));
                            setNewColor(options.color, cal.get(0));
                            if (options.flat) {
                                cal.css({
                                    position: 'relative',
                                    display: 'block'
                                });
                            } else {
                                $(this).bind(options.eventName, show);
                            }
                        }
                    });
                },
                showPicker: function () {
                    return this.each(function () {
                        if ($(this).data('colorpickerId')) {
                            show.apply(this);
                        }
                    });
                },
                hidePicker: function () {
                    return this.each(function () {
                        if ($(this).data('colorpickerId')) {
                            $('#' + $(this).data('colorpickerId')).hide();
                        }
                    });
                },
                setColor: function (col) {
                    if (typeof col == 'string') {
                        col = HexToHSB(col);
                    } else if (col.r != undefined && col.g != undefined && col.b != undefined) {
                        col = RGBToHSB(col);
                    } else if (col.h != undefined && col.s != undefined && col.b != undefined) {
                        col = fixHSB(col);
                    } else {
                        return this;
                    }
                    return this.each(function () {
                        if ($(this).data('colorpickerId')) {
                            var cal = $('#' + $(this).data('colorpickerId'));
                            cal.data('colorpicker').color = col;
                            cal.data('colorpicker').origColor = col;
                            fillRGBFields(col, cal.get(0));
                            fillHSBFields(col, cal.get(0));
                            fillHexFields(col, cal.get(0));
                            setHue(col, cal.get(0));
                            setSelector(col, cal.get(0));
                            setCurrentColor(col, cal.get(0));
                            setNewColor(col, cal.get(0));
                        }
                    });
                }
            };
        }();
        $.fn.extend({
            ColorPicker: ColorPicker.init,
            ColorPickerHide: ColorPicker.hidePicker,
            ColorPickerShow: ColorPicker.showPicker,
            ColorPickerSetColor: ColorPicker.setColor
        });


        //ColorPicker Setting
        var initLayout = function () {
            $('.eColorPicker .selector').each(function () {
                var _this = $(this);
                var epicker = _this.parents('.eColorPicker:first');
                _this.ColorPicker({
                    color: '#ff0000',
                    onShow: function (colpkr) {
                        $(colpkr).fadeIn(500);
                        return false;
                    },
                    onHide: function (colpkr) {
                        $(colpkr).fadeOut(500);
                        return false;
                    },
                    onSubmit: function (hsb, hex, rgb, el) {
                        $(el).val(hex);
                        $(el).ColorPickerHide();
                    },
                    onChange: function (hsb, hex, rgb) {
                        $('.selected', epicker).css('backgroundColor', '#' + hex);
                        $('.fText', epicker).val('#' + hex);
                    }
                });
            });
        };

        EYE.register(initLayout, 'init');
    })(jQuery)


    var oCalendarUtil = {

        makeCalType: function (date, type) {

            var sCalType = '';
            if (date) {
                var day = date.getDate();
//                if (type === 'end') {
//                    day = date.getDate();
//                }
                sCalType = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + day;
            }

            return sCalType;
        }

    };
    // modil  페이지  만들어야함
</script>
</html>

